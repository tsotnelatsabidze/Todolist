@model TodoListApp.WebApi.Models.Models.TodoTask

@{
    ViewBag.Title = "Edit";
}

<div class="container">

    <h2>Todo Task Edit</h2>

    @using (Html.BeginForm("Edit", "TodoTask", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Id)

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.TodoListId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.TodoListId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.TodoListId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.AssignedUserId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.HiddenFor(model => model.AssignedUserId)
                    @Html.ValidationMessageFor(model => model.AssignedUserId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Status, new SelectList(
                new List<SelectListItem>
                {
                new SelectListItem { Text = "Not Started", Value = "0" },
                new SelectListItem { Text = "In Progress", Value = "1" },
                new SelectListItem { Text = "Completed", Value = "2" }
                }, "Value", "Text"),
                htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>
            <input type="text" id="Tags" name="Tags" class="form-control" data-role="tagsinput" hidden />
            <!-- Display tags as a list -->
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <ul id="tagList" class="list-group">
                        @foreach (var tag in Model.Tags)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @tag.Name
                                <button type="button" class="btn btn-danger btn-sm removeTagBtn">Remove</button>
                            </li>
                        }
                    </ul>
                    <button type="button" id="addTagBtn" class="btn btn-primary">Add Tag</button>
                    @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group mb-3">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-primary" />
                    @Html.ActionLink("Details", "Details", new { id = Model.Id }, htmlAttributes: new { @class = "btn btn-sm btn-info" })
                    @Html.ActionLink("Delete", "Delete", new { id = Model.Id }, htmlAttributes: new { @class = "btn btn-sm btn-warning" })

                </div>
            </div>

        </div>
    }

    <div class=" mb-3">
        @Html.ActionLink("Back to List", "TodoTasks", "TodoList", new {Id = Model.TodoListId}, htmlAttributes: new { @class = "btn btn-info" })
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            // Optional: Add event listeners to handle changes
            // Add new tag button click event
            $('#addTagBtn').on('click', function () {
                var newTag = prompt("Enter a new tag:");
                if (newTag) {
                    addTag(newTag);
                }
            });

            // Remove tag button click event
            $(document).on('click', '.removeTagBtn', function () {
                var tagToRemove = $(this).closest('li').contents().filter(function () {
                    return this.nodeType === 3; // Filter out non-text nodes (including whitespaces)
                }).text().trim();

                removeTag(tagToRemove);
            });


            // Function to add a tag
            function addTag(tag) {
                var todoTaskId = @Model.Id; // Get the TodoTaskId from the model
                $.ajax({
                    url: '/TodoTask/AddTag',
                    type: 'POST',
                    data: { todoTaskId: todoTaskId, tag: tag },
                    success: function () {
                        // Add the tag to the UI if the server operation is successful
                        $('#tagList').append(
                            '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                            tag +
                            '<button type="button" class="btn btn-danger btn-sm removeTagBtn">Remove</button>' +
                            '</li>'
                        );
                    },
                    error: function () {
                        alert('Failed to add the tag.');
                    }
                });
            }

            // Function to remove a tag
            function removeTag(tag) {
                var todoTaskId = @Model.Id; // Get the TodoTaskId from the model
                $.ajax({
                    url: '/TodoTask/RemoveTag',
                    type: 'POST',
                    data: { todoTaskId: todoTaskId, tag: tag },
                    success: function () {
                        // Remove the tag from the UI if the server operation is successful
                        $('#tagList').find(':contains("' + tag + '")').closest('li').remove();
                    },
                    error: function () {
                        alert('Failed to remove the tag.');
                    }
                });
            }
        });
    </script>
}

